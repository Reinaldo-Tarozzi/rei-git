***** 08/02/2020 ***** 18/03/2020 *****
=================================================================================

import pandas as pd

!pip  install lib

import sklearn

!pip install pygame

=================================================================================

# Pelo Longo  ? 1
# Perna Curta ? 1
# Faz AUAU    ? 1
# Fitiner
# f([x, y, z]) = 0,1

porco_1    = [ 0, 1, 0 ]
porco_2    = [ 0, 1, 1 ]
porco_3    = [ 1, 1, 0 ]

cachorro_1 = [ 0, 1, 1 ]
cachorro_2 = [ 1, 0, 1 ]
cachorro_3 = [ 1, 1, 1 ]
treino_x = [ porco_1, porco_2, porco_3, cachorro_1, cachorro_2, cachorro_3 ]
treino_y = [ 1, 1, 1, 0, 0, 0 ]   # 0 cachorro   ==>>      1 porco

from sklearn.svm import LinearSVC

modelo = LinearSVC()
modelo.fit(treino_x, treino_y)

animal_misterioso = [ 1, 1, 1 ]
modelo.predict([ animal_misterioso ])

misterio_1 = [ 1, 1, 1 ]  # Pelo Curto, Perna Curta, Faz AUAU
misterio_2 = [ 1, 1, 0 ]  # Pelo Curto, Perna Curta, Não Faz AUAU
misterio_3 = [ 0, 1, 1 ]  # Pelo Longo, Perna Curta, Faz AUAU

teste_x = [ misterio_1, misterio_2, misterio_3 ]
teste_y = [ 0, 1, 1 ]

previsoes = modelo.predict( teste_x )
print("Resultado da Pesquisa dos Bixos Misteriosos : ( Cachorro é = 0 ) e ( Porco é = 1" )
previsoes

from sklearn.metrics import accuracy_score
print("Valor da Porcentagem Referente a Eficiência deste Algoritmo" )
( accuracy_score(teste_y, previsoes) * 100 )

=================================================================================

# 13/03/2020

def a ( m, n ):
  return( m * n )

z = {
	     10010,
	     11100,
	     10100,
	     10001,
              };

n1 = int(input("digite:"))
n2 = int(input('digite:'))  # int(input('digite:'))
s = n1 + n2

print('A soma entre {} e {} vale: {}'.format(n1, n2, s))

n = input('Digite um Valor: ')
print(type(n))

5**2

5**3

19 // 2

a = 365 ** 522 
print( a )

11 % 2

4 ** 3
pow( 4, 3 )

81 ** ( 1/2 )
 # 9 ** 2

127 ** ( 1/3 )

'oi' + 'ola'

'OI' * 5

'=' * 20

print( '=' * 20 )

nome = input( 'Qual é seu Nome? ')
print('Prazer em te conhecer {:^30} !'.format( nome ))

nome = input( 'Qual é seu Nome? ')
print('Prazer em te conhecer {:>30} !'.format( nome ))

n_1 = int( input ( 'Um Valor: ' ))
n_2 = int( input ( 'Outro Valor: ' ))
print( 'A soms Vale: {}'.format( n_1 + n_2 ))

n_1 = int( input ( 'Um Valor: ' ))
n_2 = int( input ( 'Outro Valor: ' ))
s  = n_1 + n_2
m  = n_1 * n_2
d  = n_1 / n_2
di = n_1 // n_2
e = n_1 ** n_2
print( 'A soma é {}, Produto é {} e a  Divisão é {:0.3f}'.format( s, m, d ), end = ' ')
print( 'Divisão Inteira é {} e a Potência é {}'.format( di, e ))

medidas = float( input ( 'Distancia em  Metros para Transformar: '))
cm = medidas * 100
mm = medidas * 1000
print( 'A medida de {}m Corresponde a {:.0f}cm e {:.0f}mm'.format( medidas, cm, mm))

num = int(input( 'Digite um Número para ver sua Tabuada: '))
print( '-'* 12 )
print( '{} X {:2} = {}'.format( num, 1, num * 1))
print( '{} X {:2} = {}'.format( num, 5, num * 5))
print( '-'* 12 )

real = float( input( 'Quanto Reais para Converter? R$ ' ))
dolar = real / 4.7916 # <=== 12/03/2020
print( 'com {:.2f} R$ Você compra  {:0.2f} US$'.format( real, dolar ))

altura  = float(input( 'Altura da PArede: ' ))  # 26.90 m²
largura = float(input ( 'Largura da Parede: ' ))
área = largura * altura
print('Sua Parede tem a Dimensão de {} X {} e sua Área é de {} m².'.format( altura, largura, área ))
tinta = área / 2
print( 'para Pintar essa Prede Vovê Precisará de {} Litros de Tinta.'.format( tinta ))

preço = float(input( 'Qual é o Preço do Produto ?'))
novo_preço = preço - ( preço * 5 / 100 ) 
print( 'O produto Custou {:.2f} R$, na Promoção ficou {:.2f} R$ '.format( preço, novo_preço ))

print( "-" * 95 )
Celsius = float(input( "Informe a Temperatura e Celsius "))
Fahrenheit = ((( 9 * Celsius ) / 5 ) + 32 )
print( 'A Temperatur em Celsius {} C° Comvertida para Fahrenheit {} F°'.format( Celsius, Fahrenheit ))
print( "-" * 95 )

dias = int(input( 'Quantos Dias de Aluquel ?'))
km = float(input( 'Quantos KMs Rodados ?'))
pago = ( dias * 60 ) + ( km * 0.15 )
print( 'O valor Total à Pagar é de {:.2f} R$'.format( pago ))

# import math
'''from math import trunc
num = float(input( 'Digite um Valor ?'))
print( 'O Valor Digitado foi {} e a sua Porção Inteira é {}'.format( num, trunc( num )))'''

num = float(input( 'Digite um Valor ? '))
print( 'O Valor Digitado foi {} e a sua Porção Inteira é {}'.format( num, int( num )))

co = float(input( 'Comprimento do Cateto Oposto: '))
ca = float(input( 'Comprimento do CAteto Adjacente: '))
hi = ( co ** 2 + ca ** 2 ) ** ( 1/2 )
print( 'A HIPOTENUSA Mede {:.2f}'.format( hi ))

# import math
from math import hypot
co = float(input( 'Comprimento do Cateto Oposto: '))
ca = float(input( 'Comprimento do CAteto Adjacente: '))
hi = math.hypot( co, ca)
print( 'A HIPOTENUSA Mede {:.2f}'.format( hi ))

import math
ângulo = float(input( 'Digite o Ângulo '))
seno = math.sin( math.radians( ângulo ))
print( 'O Ângolo de {}° tem o Seno de {:.2f}'.format( ângulo, seno ))
cosseno = math.cos( math.radians( ângulo))
print( 'O Ângolo de {}° tem o Cosseno de {:.2f}'.format( ângulo, cosseno ))
tangente = math.tan( math.radians( ângulo))
print( 'O Ângolo de {}° tem a Tangente de {:.2f}'.format( ângulo, tangente ))

from math import sin, cos, tan
ângulo = float(input( 'Digite o Ângulo '))
seno = sin( radians( ângulo ))
print( 'O Ângolo de {}° tem o Seno de {:.2f}'.format( ângulo, seno ))
cosseno = cos( radians( ângulo))
print( 'O Ângolo de {}° tem o Cosseno de {:.2f}'.format( ângulo, cosseno ))
tangente = tan( radians( ângulo))
print( 'O Ângolo de {}° tem a Tangente de {:.2f}'.format( ângulo, tangente ))

import random
n_1 = str(input( 'Primeiro Aluno: '))
n_2 = str(input( 'Segundo Aluno: '))
n_3 = str(input( 'Terceiro Aluno: '))
n_4 = str(input( 'Quarto Aluno: '))
lista = [ n_1, n_2, n_3, n_4 ]
escolhido = random.choice( lista)
print( 'O Aluno Escolhido foi {}'.format( escolhido ))

import random
n_1 = str(input( 'Primeiro Aluno: '))
n_2 = str(input( 'Segundo Aluno: '))
n_3 = str(input( 'Terceiro Aluno: '))
n_4 = str(input( 'Quarto Aluno: '))
lista = [ n_1, n_2, n_3, n_4 ]
escolhido = random.choice( lista)
print( 'O Aluno Escolhido foi {}'.format( escolhido ))

# import random
from random import shuffle
n_1 = (input( 'Primeiro Aluno: '))
n_2 = str(input( 'Segundo Aluno: '))
n_3 = str(input( 'Terceiro Aluno: '))
n_4 = str(input( 'Quarto Aluno: '))
lista = [ n_1, n_2, n_3, n_4 ]
shuffle( lista )
print( 'A Ordem de Apresentação sera: ')
print( lista )

!pip install pygame

import pygame
pygame.init()
game.mixer.music.load('flor.mp3' )
pygame.mixe.music.play()
pygame.event.wait()

!pip install pygame
import pygame
pygame.init()

=================================================================================

'''
Duni_Python

# Pega estes Valores Aleatorios e Constroe um Grafo Commits:( Rede Neural ).
# Com Angulo de 90°

# Matilab.

# Python.

Gaussian:
----------

---------------------------------------------------------------------------------

log ({[aba^2*^^3]})

log {[(bab^3*^^)]}

vetor matrix_a
vetor matrix_b

a = Learning rate [0.1] = { B00001100,
                            B00010010,
                            B00010010,
                            B00001100,
                            B00000000,
                            B00000000,
                            B00000000,
                            B00000000, };


b = Activation linear [1.1] = { B01100110,
                                B11001111,
                                B10001111,
                                B11000111,
                                B10010111,
                                B10011011,
                                B10110011,
                                B10011011, };

regularization_None  UB [None] = { B11010111,
                                   B11100111,
                                   B10101101,
                                   B01010100,
                                   B01010100,
                                   B00111000,
                                   B01010100,
                                   B00100110, };

Regularization_rate  RT[0.1] = { B10011010,
                               B10110011,
                               B10010111,
                               B10110011,
                               B11010011,
                               B10110011,
                               B11010101,
                               B10101011, 
LinearSVC( C = 1.0, class_weight = None, dual = True, fit_intercept = True,
          intercept_scaling = 1, loss = 'squared_hinge', max_iter = 1000,
          multi_class = 'ovr', penalty = 'l2' ,random_state = None, tol = 0.0001,
          verbose = 0 ), Classification      };

#--------------------------------------------------------------------------------
'''
=================================================================================

# ( 1, 1, 1, 1, 1, 1, 1, 1 = 87.5 ) <=== ESTE
# ( 1, 1, 1, 1, 1, 1, 1, 0 = 75.0 ) <=== ESTE
# ( 1, 1, 1, 1, 1, 0, 1, 1 = 62.5 )
# ( 1, 1, 1, 0, 1, 0, 0, 0 = 50.0 )
# ( 1, 1, 1, 0, 1, 1 ,0, 1 = 37.5 ) , 0, 0 ,0, 1
# ( 1, 1, 1, 0, 1, 1, 0, 0 = 37.5 )
# ( 1, 1, 1, 0, 0, 0, 0, 0 = 37.5 )
# ( 1, 1, 1, 0, 1, 0, 1, 1 = 75.0 )
# ( 1, 1, 1, 0, 1, 0, 1, 0 = 75.0 )
# ( 1, 1, 1, 1, 1, 0, 1, 0 = 75.0 )
# ( 1, 1, 1, 1, 1, 0, 1, 0 = 75.0 )
# ( 1, 1, 1, 0, 1, 1, 0, 0 = 62.5 )
# ( 1, 1, 1, 1, 1, 1, 1, 0 = 62.5 )
# ( 1, 1, 1, 0, 1, 0, 0, 0 = 50.0 ) 

=================================================================================

# pelo longo ?    é 1
# perna curta ?   é 1
# faz auau ?      é 1
# Fitch
# f([ x, y, z ]) = 0,1
porco_1    = [ 0, 1, 0 ]
porco_2    = [ 1, 1, 0 ]
porco_3    = [ 0, 0, 1 ] # ===>> Operação Iracional.
cachorro_1 = [ 0, 1, 1 ]
cachorro_2 = [ 1, 0, 1 ]
cachorro_3 = [ 1, 1, 1 ]
treino_x = [ porco_1, porco_2, porco_3, cachorro_1, cachorro_2, cachorro_3 ] 
treino_y = [ 1, 1, 1, 0, 0, 0 ]   # 0 cachorro   ==>>      1 porco

from sklearn.svm import LinearSVC
modelo = LinearSVC()
modelo.fit( treino_x, treino_y )

animal_misterioso_test = [ 0, 1, 0 ]
if( animal_misterioso_test[2] == 1 ):
  print( 'Animal Misterioso Teste é um Cachorro')
else:
  print( 'Animal Misterioso Teste é um Porco')
modelo.predict([ animal_misterioso ])

misterio_0 = [ 0, 1, 1 ]
misterio_1 = [ 1, 0, 0 ]
misterio_2 = [ 0, 1, 1 ]
misterio_3 = [ 0, 1, 0 ]

teste_x = [ misterio_0, misterio_1, misterio_2, misterio_3 ]
teste_y = [ 1, 1, 1 , 0 ]  # Eu sei que é um CACHORRO.

if( previsoes[0] == 0 ):
  print( 'Animal Misterioso_1 é um Cachorro' )
else:
  print( 'Animal Misterioso_1 é um Porco' )
if( previsoes[1] == 0 ):
  print( 'Animal Misterioso_2 é um Cachorro' )
else:
  print( 'Animal Misterioso_2 é um Porco' )
if( previsoes[2] == 0 ):
  print( 'Animal Misterioso_3 é um Cachorro' )
else:
  print( 'Animal Misterioso_3 é um Porco' )
if( previsoes[3] == 0 ):
  print( 'Animal Misterioso_4 é um Cachorro' )
else:
  print( 'Animal Misterioso_4 é um Porco' )

previsoes = modelo.predict( teste_x )
print(previsoes)

from sklearn.metrics import accuracy_score
accuracy_score( teste_y, previsoes ); ' Percentual da Eficiencia do Algoritmo de 75% ( 83.67 ) 88% '

=================================================================================

# Gato ou Coelho ?:

# Pelo Longo  = 1
# Olho Grande = 1
# Rabo Peludo = 1
# Faz Miau    = 1

gato_1   = [ 0, 1, 0, 1 ]
gato_2   = [ 1, 0, 1, 1 ]
gato_3   = [ 0, 1, 0, 1 ]

coelho_1 = [ 0, 1, 1, 0 ]
coelho_2 = [ 1, 0, 1, 0 ] 
coelho_3 = [ 1, 1, 1, 0 ]

treino_x = [ gato_1, gato_2, gato_3, coelho_1, coelho_2, coelho_3 ]
treino_y = [ 1, 1, 1, 0, 0, 0 ]   # ( 1 é Gato )  ==>>     ( 0  é Coelho )

from sklearn.svm import LinearSVC
modelo = LinearSVC()
modelo.fit(treino_x, treino_y)

animal_misterioso = [ 0, 1, 0, 1 ]
modelo.predict([ animal_misterioso ])  # Predis o que é

previsoes = modelo.predict(treino_x)
previsoes

misterio_1 = [ 1, 1, 1, 0 ]
misterio_2 = [ 1, 1, 0, 0 ]
misterio_3 = [ 0, 1, 1, 0 ]
misterio_4 = [ 1, 0, 1, 1 ]
misterio_5 = [ 0, 0, 0, 1 ]
misterio_6 = [ 0, 0, 1, 0 ]
misterio_7 = [ 1, 0, 0, 0 ]
misterio_8 = [ 0, 1, 0, 0 ]

teste_x = [ misterio_1,
            misterio_2,
            misterio_3,
            misterio_4, misterio_5, misterio_6, misterio_7, misterio_8 ]
teste_y = [ 1, 1, 1 ]  # O que Eu Sei

print( '-=-' * 11 )
if( previsoes[0] == 1 ):
  print( ' Animal Misterioso_1 é um gato' )
else:
  print( ' Animal Misterioso_1 é um Coelho' )
if( previsoes[1] == 1 ):
  print( ' Animal Misterioso_2 é um Gato' )
else:
  print( ' Animal Misterioso_2 é um Coelho' )
if( previsoes[2] == 1 ):
  print( ' Animal Misterioso_3 é um Gato' )
else:
  print( ' Animal Misterioso_3 é um Coelho' )
if( previsoes[3] == 1 ):
  print( ' Animal Misterioso_4 é um Gato' )
else:
  print( ' Animal Misterioso_4 é um Coelho' )

if( previsoes[4] == 1 ):
  print( ' Animal Misterioso_5 é um gato' )
else:
  print( ' Animal Misterioso_5 é um Coelho' )
if( previsoes[5] == 1 ):
  print( ' Animal Misterioso_6 é um Gato' )
else:
  print( ' Animal Misterioso_6 é um Coelho' )
if( previsoes[6] == 1 ):
  print( ' Animal Misterioso_7 é um Gato' )
else:
  print( ' Animal Misterioso_7 é um Coelho' )
if( previsoes[7] == 1 ):
  print( ' Animal Misterioso_8 é um Gato' )
else:
  print( ' Animal Misterioso_8 é um Coelho' )
print( '-=-' * 11 )
previsoes = modelo.predict( teste_x )
print( 'Matriz Original', previsoes )
print( '-=-' * 11 )

=================================================================================

dados = { "nome" : "Guilherme", "idade" : 37, "empresa" : "Alura" }
dados
dados["nome"]

=================================================================================

filme1 = "Toy Story 17"
 filme2 = "A xuxa contra o Baixo Astral"
 filme3 = "Matrix 1"
 

filmes = ['Toy Story 17', 'A xuxa contra o Baixo Astral', 'Matrix 1']

filmes

list()

def imprime_filmes(filmes_que_quero_imprimir):
  print("A lista de filmes que eu tenho disponivel")
  print(filmes)

imprime_filmes(filmes)
imprime_filmes(filmes)
imprime_filmes(filmes)

filmes[1]

filmes[-1]

filmes[1:]

filmes[-2:]

for filme in filmes:
  print(filme)
  print(".....")
print("estou fora do laco")

def imprime_filmes(filmes_que_quero_imprimir):
  print("A Lista de Filmes que eu tenho Disponivel")
  for filme in filmes_que_quero_imprimir:
    print(filme)

imprime_filmes(filmes)

=================================================================================

# Nova Coleção
porco = 1
gato = 2
porco + gato
nome = "Rei"
nome = 'Paulo'
nome
!pip  install lib

=================================================================================

nome = "michel"
print(nome)
nome = "guilerme"
nome

def mais_um_ano(idade):
  print("ta dentro dessa funcao")
  return idade + 1
mais_um_ano(43)

=================================================================================

a = 12
b = 24
a + b
nome = "Rui"  
print(nome)
pi = 3.14 
alfa = 13 
pi * 13 
1 + 2

=================================================================================

asas = [1, 2, 3, 4]
for asa in asas:
  print(asa)
  print(".....")
  print(asas)
print("estou fora do laco")

=================================================================================

b = [4,5,7,2,9,23,43,12,3]

for q in b:
  print(q)
  print(".....")
  print(b)
print("===>>  fora do laco")

=================================================================================

try:
  # Colab only
  %tensorflow_version 2.x
except Exception:
    pass

=================================================================================

from __future__ import absolute_import, division, print_function, unicode_literals

# TensorFlow e tf.keras
import tensorflow as tf
from tensorflow import keras

# Librariesauxiliares
import numpy as np
import matplotlib.pyplot as plt

fashion_mnist = keras.datasets.fashion_mnist
(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

=================================================================================

# CLASSIFICADOR

try:
  # Colab only
  %tensorflow_version 2.x
except Exception:
  pass

rom __future__ import absolute_import, division, print_function, unicode_literals

# TensorFlow e tf.keras
import tensorflow as tf
from tensorflow import keras

# Librariesauxiliares
import numpy as np
import matplotlib.pyplot as plt

print(tf.__version__)

fashion_mnist = keras.datasets.fashion_mnist

(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

train_images.shape

len(train_labels)

train_labels

test_images.shape

len(test_labels)

# ima = [ 0, 1, 2, 3 ,4 , 5, 6, 7, 8, 9, 10, 11, 12 ]

# for at in ima:
for i in range(26):
  #import time
  #time.sleep(3) # sleep for a while; interrupt me!
  print(i)

  plt.figure()
  plt.imshow(train_images[i])  # train_images[0]
  plt.colorbar()
  plt.grid(False)
  plt.show()

train_images = train_images / 255.0

test_images = test_images / 255.0

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    plt.xlabel(class_names[train_labels[i]])
plt.show()

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])  #  Layers

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(train_images, train_labels, epochs=10)

test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)

print( '\nTest em Porcento accuracy:', test_acc * 100 )  # Acurácia 88% ===> overfitting

predictions = model.predict(test_images)

predictions[0]

np.argmax(predictions[0])

def plot_image(i, predictions_array, true_label, img):
  predictions_array, true_label, img = predictions_array[i], true_label[i], img[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])

  plt.imshow(img, cmap=plt.cm.binary)

  predicted_label = np.argmax(predictions_array)
  if predicted_label == true_label:
    color = 'blue'
  else:
    color = 'red'

  plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
                                100*np.max(predictions_array),
                                class_names[true_label]),
                                color=color)

def plot_value_array(i, predictions_array, true_label):
  predictions_array, true_label = predictions_array[i], true_label[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])
  thisplot = plt.bar(range(10), predictions_array, color="#777777")
  plt.ylim([0, 1])
  predicted_label = np.argmax(predictions_array)

  thisplot[predicted_label].set_color('red')
  thisplot[true_label].set_color('blue')

i = 0
plt.figure(figsize=(6,3))
plt.subplot(1,2,1)
plot_image(i, predictions, test_labels, test_images)
plt.subplot(1,2,2)
plot_value_array(i, predictions,  test_labels)
plt.show()

i = 12
plt.figure(figsize=(6,3))
plt.subplot(1,2,1)
plot_image(i, predictions, test_labels, test_images)
plt.subplot(1,2,2)
plot_value_array(i, predictions,  test_labels)
plt.show()

# Plota o primeiro X test images, e as labels preditas, e as labels verdadeiras.
# Colore as predições corretas de azul e as incorretas de vermelho.
num_rows = 5
num_cols = 3
num_images = num_rows*num_cols
plt.figure(figsize=(2*2*num_cols, 2*num_rows))
for i in range(num_images):
  plt.subplot(num_rows, 2*num_cols, 2*i+1)
  plot_image(i, predictions, test_labels, test_images)
  plt.subplot(num_rows, 2*num_cols, 2*i+2)
  plot_value_array(i, predictions, test_labels)
plt.show()

# Grab an image from the test dataset.
img = test_images[0]

print(img.shape)

# Adiciona a imagem em um batch que possui um só membro.
img = (np.expand_dims(img,0))

print(img.shape)

predictions_single = model.predict(img)

print(predictions_single)

plot_value_array(0, predictions_single, test_labels)
_ = plt.xticks(range(10), class_names, rotation=45)

np.argmax(predictions_single[0])

=================================================================================

%%html
<marquee style='width: 100%; color: yellow;'><b>Joaninha é um Jacaré Fêmia</b></marquee>

=================================================================================

idade = 18
def coloca_mais_um_ano(idade):
  print("sua Idade atual é Definida em Anos: ")
  return idade + 1
  
coloca_mais_um_ano(21)

print( 'Ola Rui')

=================================================================================

Rui = 3
nome = Rui
print(Rui ** 45)
print(2954312706550833698643)
type(2954312706550833698643)

=================================================================================

from sklearn.metrics import accuracy_score
print( 'Eficiência deste Algoritmo: {:.2f} % '.format( accuracy_score( teste_y, previsoes)*100))

=================================================================================